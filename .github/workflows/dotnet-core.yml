name: demoapp

on:
  push:
    branches:
      - develop
      - master

env:
  GITVERSION_VERSION: 5.3.4
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1 
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  FINTER_NUGET_FEED: https://nuget.pkg.github.com/fintermobilityas/index.json
  SNAPX_UPDATE_FEED_URL: https://www.myget.org/F/snapxdemo/api/v3/index.json
  SNAPX_ID: demoapp
  
jobs:

  setup:    
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      BUILD_VERSION: ${{ steps.set-build-version.outputs.BUILD_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
  
      - name: Setup dotnet using global.json        
        uses: actions/setup-dotnet@v1.5.0

      - id: set-build-version
        name: Read current application version
        shell: pwsh
        run: |
          dotnet tool update GitVersion.Tool --global --version ${{ env.GITVERSION_VERSION }}
          $BUILD_VERSION = (dotnet gitversion /showVariable NugetVersionv2) | out-string
          echo "::set-output name=BUILD_VERSION::$BUILD_VERSION"

  build-linux:
    name: Build linux
    runs-on: ubuntu-latest
    needs: [setup]
    env:
      BUILD_VERSION: ${{ needs.setup.outputs.BUILD_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Setup dotnet using global.json        
        uses: actions/setup-dotnet@v1.5.0
        
      - name: Setup dotnet nuget feeds
        run: dotnet nuget add source ${{ env.FINTER_NUGET_FEED }} --name fintermobilityas --username fintermobilityas --password ${{ secrets.FINTER_NUGET_GITHUB_PACKAGES_TOKEN }} --store-password-in-clear-text 

      - name: Build 
        shell: pwsh
        run: |
          $build_version = $env:BUILD_VERSION;          
          pwsh -command ".\$GITHUB_WORKSPACE\build.ps1" -Version $build_version 
          
      - name: Upload artifacts      
        if: success() 
        uses: actions/upload-artifact@v2
        with:
          name: linux-latest-artifacts
          path: ${{ github.workspace }}/.snapx/artifacts/${{ env.SNAPX_ID }}/linux-x64/${{ env.BUILD_VERSION }}/**/*
         
  build-windows:
    if: success()
    name: Build windows
    runs-on: windows-latest
    needs: [setup]
    env:
      BUILD_VERSION: ${{ needs.setup.outputs.BUILD_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
                            
      - name: Setup dotnet using global.json        
        uses: actions/setup-dotnet@v1.5.0
          
      - name: Setup dotnet nuget feeds
        run: dotnet nuget add source ${{ env.FINTER_NUGET_FEED }} --name fintermobilityas --username fintermobilityas --password ${{ secrets.FINTER_NUGET_GITHUB_PACKAGES_TOKEN }} --store-password-in-clear-text  
      
      - name: Build 
        shell: pwsh
        run: |
          $build_version = $env:BUILD_VERSION;          
          pwsh -command ".\$GITHUB_WORKSPACE\build.ps1" -Version $build_version -SnapxToken ${{ secrets.SNAPX_TOKEN }}

      - name: Upload artifacts        
        if: success() 
        uses: actions/upload-artifact@v2
        with:
          name: windows-latest-artifacts
          path: ${{ github.workspace }}/.snapx/artifacts/${{ env.SNAPX_ID }}/win-x64/${{ env.BUILD_VERSION }}/**/*
          
  publish:
    if: success()
    name: Publish release to test channel on all supported operating systems
    runs-on: windows-latest
    needs: [setup, build-linux, build-windows]
    strategy:
      matrix: 
        os: [windows-latest, ubuntu-latest]
    env:
      BUILD_VERSION: ${{ needs.setup.outputs.BUILD_VERSION }}
      SNAPX_LOG_EXCEPTIONS: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
          lfs: false
      
      - name: Setup dotnet using global.json
        uses: actions/setup-dotnet@v1.5.0
          
      - name: Setup dotnet nuget feeds
        run: |
          dotnet nuget add source ${{ env.FINTER_NUGET_FEED }} --name fintermobilityas --username fintermobilityas --password ${{ secrets.FINTER_NUGET_GITHUB_PACKAGES_TOKEN }} --store-password-in-clear-text 
          dotnet nuget add source ${{ env.SNAPX_UPDATE_FEED_URL }} --name ${{ env.SNAPX_ID }}-update
          dotnet nuget add source ${{ secrets.SNAPX_PUBLISH_FEED_URL }} --name ${{ env.SNAPX_ID }}-publish
        
      - name: Setup dotnet snapx
        shell: pwsh
        run: | 
          [xml] $xml_content = Get-Content ".\$GITHUB_WORKSPACE\Directory.Build.props";
          $snapx_version = Select-Xml -Xml $xml_content -XPath "//Project/PropertyGroup/SnapxVersion" | Select -Expand Node | Select -Expand "#text"
          dotnet tool update snapx --global --version $snapx_version
        
      - name: Download linux artifacts
        if: success() && matrix.os == 'ubuntu-latest'
        uses: actions/download-artifact@v2
        with:
          name: linux-latest-artifacts
          path: ${{ github.workspace }}/.snapx/artifacts/${{ env.SNAPX_ID }}/linux-x64/${{ env.BUILD_VERSION }}
          
      - name: Download windows artifacts
        if: success() && matrix.os == 'windows-latest'
        uses: actions/download-artifact@v2
        with:
          name: windows-latest-artifacts
          path: ${{ github.workspace }}/.snapx/artifacts/${{ env.SNAPX_ID }}/win-x64/${{ env.BUILD_VERSION }}
      
      - name: Publish release to linux test channel
        if: success() && matrix.os == 'ubuntu-latest'
        timeout-minutes: 15
        run: snapx pack -a ${{ env.SNAPX_ID }} -r linux-x64 -v ${{ env.BUILD_VERSION }} --lock-token ${{ secrets.SNAPX_TOKEN }} --lock-retries -1 -y
      
      - name: Publish release to windows test channel
        if: success() && matrix.os == 'windows-latest'
        timeout-minutes: 15
        run: snapx pack -a ${{ env.SNAPX_ID }} -r win-x64 -v ${{ env.BUILD_VERSION }} --lock-token ${{ secrets.SNAPX_TOKEN }} --lock-retries -1 -y
      
      - name: Upload installers      
        if: success() 
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-installers
          path: ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/**/*
          
  release:
     if: success() && github.ref == 'refs/heads/master'
     name: Create release tag and upload installers
     runs-on: ubuntu-latest
     needs: [setup, publish]  
     env:
      BUILD_VERSION: ${{ needs.setup.outputs.BUILD_VERSION }}
     steps:
        - name: Download windows installers
          if: success() 
          uses: actions/download-artifact@v2
          with:
            name: windows-latest-installers
            path: ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/win-x64

        - name: Download linux installers
          if: success() 
          uses: actions/download-artifact@v2
          with:
            name: linux-latest-installers
            path: ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/linux-x64
            
        - name: Create github release tag
          if: success() 
          id: create-release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: v${{ env.BUILD_VERSION }}
            release_name: Release v${{ env.BUILD_VERSION }}
            draft: true
            prerelease: false

        - name: Upload Setup-win-x64-test-web.exe
          if: success()
          uses: actions/upload-release-asset@v1.0.2
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create-release.outputs.upload_url }} 
            asset_path: ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/win-x64/Setup-win-x64-test-web.exe
            asset_name: Setup-win-x64-test-web.exe
            asset_content_type: application/vnd.microsoft.portable-executable

        - name: Upload Setup-win-x64-production-web.exe
          if: success() 
          uses: actions/upload-release-asset@v1.0.2
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create-release.outputs.upload_url }} 
            asset_path: ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/win-x64/Setup-win-x64-production-web.exe
            asset_name: Setup-win-x64-production-web.exe
            asset_content_type: application/vnd.microsoft.portable-executable

        - name: Upload Setup-linux-x64-test-web.bin
          if: success()
          uses: actions/upload-release-asset@v1.0.2
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create-release.outputs.upload_url }} 
            asset_path: ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/linux-x64/Setup-linux-x64-test-web.bin
            asset_name: Setup-win-x64-test-web.bin
            asset_content_type: application/x-elf

        - name: Upload Setup-linux-x64-production-web.bin
          if: success() 
          uses: actions/upload-release-asset@v1.0.2
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create-release.outputs.upload_url }} 
            asset_path: ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/linux-x64/Setup-linux-x64-production-web.bin
            asset_name: Setup-linux-x64-production-web.bin
            asset_content_type: application/x-elf
