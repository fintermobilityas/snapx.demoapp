name: demoapp

on:
  push:
    branches:
      - develop
      - master

env:
  GITVERSION_VERSION: 5.3.4
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1 
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  SNAPX_ID: demoapp
  SNAPX_LOG_EXCEPTIONS: 1
  SNAPX_UPDATE_FEED_URL: https://www.myget.org/F/demoapp2/api/v3/index.json

jobs:

  setup:    
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      BUILD_VERSION: ${{ steps.set-build-version.outputs.BUILD_VERSION }}
      SNAPX_VERSION: ${{ steps.set-snapx-version.outputs.SNAPX_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
  
      - name: Setup dotnet using global.json        
        uses: actions/setup-dotnet@v1.5.0

      - id: set-build-version
        name: Read current application version
        shell: pwsh
        run: |
          dotnet tool update GitVersion.Tool --global --version ${{ env.GITVERSION_VERSION }}
          $BUILD_VERSION = (dotnet gitversion /showVariable NugetVersionv2) | out-string
          echo "::set-output name=BUILD_VERSION::$BUILD_VERSION"

      - id: set-snapx-version
        name: Read current snapx version
        shell: pwsh
        run: |
         [xml] $xml_content = Get-Content ".\$GITHUB_WORKSPACE\Directory.Build.props";
         $SNAPX_VERSION = Select-Xml -Xml $xml_content -XPath "//Project/PropertyGroup/SnapxVersion" | Select -Expand Node | Select -Expand "#text"
         echo "::set-output name=SNAPX_VERSION::$SNAPX_VERSION"

  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [setup]
    strategy:
      matrix: 
        os: [windows-latest, ubuntu-latest]
    env:
      BUILD_VERSION: ${{ needs.setup.outputs.BUILD_VERSION }}
      SNAPX_VERSION: ${{ needs.setup.outputs.SNAPX_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Setup dotnet using global.json        
        uses: actions/setup-dotnet@v1.5.0

      - name: Build 
        shell: pwsh
        run: |
          $MatrixOs = "${{ matrix.os }}";
          $DotnetRid = $null;
          
          switch($MatrixOs) 
          {
              "windows-latest" {
                $DotnetRid = "win-x64";
              }
              "ubuntu-latest" {
                $DotnetRid = "linux-x64";
              }
              default {
                Write-Error "Unsupported os: $MatrixOs"
              }
          }
          
          pwsh -command ".\$GITHUB_WORKSPACE\build.ps1" -Version ${{ env.BUILD_VERSION }} 
          echo "::set-env name=DOTNET_RID::$DotnetRid"
          
      - name: Upload artifacts 
        if: success() 
        uses: actions/upload-artifact@v2.0.1
        with:
          name: ${{ matrix.os }}-artifacts
          path: ${{ github.workspace }}/.snapx/artifacts/${{ env.SNAPX_ID }}/${{ env.DOTNET_RID }}/${{ env.BUILD_VERSION }}
                   
  publish:
    if: success()
    name: Publish ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [setup, build]
    strategy:
      matrix: 
        os: [windows-latest, ubuntu-latest]
    env:
      BUILD_VERSION: ${{ needs.setup.outputs.BUILD_VERSION }}
      SNAPX_VERSION: ${{ needs.setup.outputs.SNAPX_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
          lfs: false
      
      - name: Setup dotnet using global.json
        uses: actions/setup-dotnet@v1.5.0
          
      - name: Setup snapx update and push feed
        run: |
          dotnet nuget add source ${{ env.SNAPX_UPDATE_FEED_URL }} --name ${{ env.SNAPX_ID }}-update
          dotnet nuget add source ${{ secrets.SNAPX_PUBLISH_FEED_URL }} --name ${{ env.SNAPX_ID }}-publish
        
      - name: Setup dotnet snapx
        run: dotnet tool update snapx --global --version ${{ env.SNAPX_VERSION }}
        
      - name: Download linux artifacts
        if: success() && matrix.os == 'ubuntu-latest'
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest-artifacts
          path: ${{ github.workspace }}/.snapx/artifacts/${{ env.SNAPX_ID }}/linux-x64/${{ env.BUILD_VERSION }}
          
      - name: Download windows artifacts
        if: success() && matrix.os == 'windows-latest'
        uses: actions/download-artifact@v2
        with:
          name: windows-latest-artifacts
          path: ${{ github.workspace }}/.snapx/artifacts/${{ env.SNAPX_ID }}/win-x64/${{ env.BUILD_VERSION }}
      
      - name: Publish linux-x64 to test channel
        if: success() && matrix.os == 'ubuntu-latest'
        timeout-minutes: 15
        run: snapx pack ${{ env.SNAPX_ID }} -r linux-x64 -v ${{ env.BUILD_VERSION }} --lock-token ${{ secrets.SNAPX_TOKEN }} --lock-retries -1 -y
     
      - name: Publish win-x64 to test channel
        if: success() && matrix.os == 'windows-latest'
        timeout-minutes: 15
        run: snapx pack ${{ env.SNAPX_ID }} -r win-x64 -v ${{ env.BUILD_VERSION }} --lock-token ${{ secrets.SNAPX_TOKEN }} --lock-retries -1 -y
     
      - name: Upload installers      
        if: success() 
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-installers
          path: ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/**/*
          
  release:
     if: success() && github.ref == 'refs/heads/master'
     name: Create release and upload assets
     runs-on: ubuntu-latest
     needs: [setup, publish]  
     env:
      BUILD_VERSION: ${{ needs.setup.outputs.BUILD_VERSION }}
      SNAPX_VERSION: ${{ needs.setup.outputs.SNAPX_VERSION }}
     steps:
     
        - name: Download win-x64 installer
          if: success() 
          uses: actions/download-artifact@v2
          with:
            name: windows-latest-installers
            path: ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/win-x64

        - name: Download linux-x64 installer
          if: success() 
          uses: actions/download-artifact@v2
          with:
            name: ubuntu-latest-installers
            path: ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/linux-x64
        
        - name: Create github release tag
          uses: softprops/action-gh-release@v1
          with:
            name: Release v${{ env.BUILD_VERSION }}
            tag_name: v${{ env.BUILD_VERSION }}
            draft: true
            prerelease: false
            files: |
              ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/win-x64/Setup-win-x64-${{ env.SNAPX_ID }}-test-offline.exe
              ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/win-x64/Setup-win-x64-${{ env.SNAPX_ID }}-test-web.exe
              ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/linux-x64/Setup-linux-x64-${{ env.SNAPX_ID }}-test-offline.bin
              ${{ github.workspace }}/.snapx/installers/${{ env.SNAPX_ID }}/linux-x64/Setup-linux-x64-${{ env.SNAPX_ID }}-test-web.bin
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          
